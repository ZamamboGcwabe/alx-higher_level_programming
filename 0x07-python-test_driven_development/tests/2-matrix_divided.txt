def test_dividing_matrix():
    """
    Test dividing all elements of a matrix.
    """
    matrix = [[1, 2, 3], [4, 5, 6]]
    result = matrix_divided(matrix, 3)
    expected = [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
    assert result == expected

def test_dividing_single_element_matrix():
    """
    Test dividing a single-element matrix.
    """
    matrix = [[5]]
    result = matrix_divided(matrix, 2)
    expected = [[2.5]]
    assert result == expected

def test_type_error_for_non_matrix_input():
    """
    Test raising TypeError for non-matrix inputs.
    """
    with pytest.raises(TypeError) as excinfo:
        matrix_divided([1, 2, 3], 2)
    assert "matrix must be a matrix (list of lists) of integers/floats" in str(excinfo.value)

def test_type_error_for_uneven_rows():
    """
    Test raising TypeError for matrices with uneven rows.
    """
    with pytest.raises(TypeError) as excinfo:
        matrix_divided([[1, 2], [3, 4, 5]], 2)
    assert "Each row of the matrix must have the same size" in str(excinfo.value)

def test_type_error_for_non_numeric_div():
    """
    Test raising TypeError for non-numeric divisors.
    """
    with pytest.raises(TypeError) as excinfo:
        matrix_divided([[1, 2], [3, 4]], "hello")
    assert "div must be a number" in str(excinfo.value)

def test_zero_division_error():
    """
    Test raising ZeroDivisionError for division by zero.
    """
    with pytest.raises(ZeroDivisionError) as excinfo:
        matrix_divided([[1, 2], [3, 4]], 0)
    assert "division by zero" in str(excinfo.value)

